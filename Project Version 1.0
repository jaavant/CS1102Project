;;Johnathan A`Vant

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Data Definitions for the Language  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;a delta is (make-delta x y)
#| (define (delta-fun a-delta)
         ..(delta-x a-delta)..
         ..(delta-y a-delta)..)
|#
(define-struct delta(x y))


;; A object is (make-object shape posn delta contact? temp?)
;; a shape is either
;; - (make-circle number string string)
;; - (make-rectangle number number string string)
(make-object shape posn delta perm?)

;; A schene is (make-schene list[cmds])
(make-schene cmds)

;; A cmd is
;; - (make-draw-cmd object)
;; - (make-move-cmd object)
;; - (make-jump-cmd object)
;; - (make-delete-cmd object)
(make-draw-cmd object)
(make-move-cmd object)
(make-jump-cmd object)
(make-delete-cmd object)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  EXAMPLE PROGRAM   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define schene1
  (let ([ball
         (make-object
             (make-circle 20 "solid" "red") (make-posn 20 20) (make-delta 30 5) true)]
        [wall
         (make-object
             (make-rectangle 25 100 "solid" "blue") (make-posn 80 20) (make-delta 0 0) false)])
    (make-schene
     (list   (make-draw-cmd ball) (make-draw-cmd wall)
             (make-delete-cmd ball) (make-delete-cmd wall)
             (make-move-cmd object)))))
           
           
           
                  
    
    




    
